mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,2:11]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# DESCRIPTION:
# The script plots effectiveness landscapes as described in
# Schupp, E. W., Jordano, P. and Gómez, J.M. 2010. Seed dispersal
# effectiveness revisited: a conceptual review. New Phytologist
# 188: 333-353.
#---------------------------------------------------------------------------
# Notes to do
# - Adding a function for the isolines code. OK.
# - Implementing an option for setting the number of desired
# isolines. OK.
# Implementing ggplot2 graph. OK! Done.
# - Checking with other datasets.
# Add isolines labels with annotate rather than geom_text. Pixelated.
#---------------------------------------------------------------------------
# NOT-Log scaled axes. Data example for Prunus mahaleb.
#
# Input data here.
sde <- read.table("data.txt", header=T, sep="\t", dec=".", na.strings="NA")
# Variables in dataset:
# dataset    plant    animal	visits	prop_visits	eff_per_vis	eff_total
# prop_disp_service	frugivore_species
#
# The frugivore groups are:
# title="Functional group",
#    c("Large birds","Thrushes","Warblers","Small muscicapids","Others")
#
#---------------------------------------------------------------------------
# Code with ggplot2
# This plots the isolines (code prototype by Bernardo Santos.)
#
nlines <- 5 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(sde$eff_per_vis)/max(sde$visits)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(sde$visits),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0,max(sde$visits),length.out=1000)
#---------------------------------------------------------------------------
pp<- as.data.frame(NULL) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ----------------------------------------------------------------
require(devtools)
require(ggplot2)
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(sde, aes(x=visits, y=eff_per_vis)) +
geom_point(shape=sde$group, size=5) +
geom_text(size=4, label=sde$animal,hjust=0.5, vjust=1.9) +
mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,2:11]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
dim(pp)
labely
pp$vis1
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# DESCRIPTION:
# The script plots effectiveness landscapes as described in
# Schupp, E. W., Jordano, P. and Gómez, J.M. 2010. Seed dispersal
# effectiveness revisited: a conceptual review. New Phytologist
# 188: 333-353.
#---------------------------------------------------------------------------
# Notes to do
# - Adding a function for the isolines code. OK.
# - Implementing an option for setting the number of desired
# isolines. OK.
# Implementing ggplot2 graph. OK! Done.
# - Checking with other datasets.
# Add isolines labels with annotate rather than geom_text. Pixelated.
#---------------------------------------------------------------------------
# NOT-Log scaled axes. Data example for Prunus mahaleb.
#
# Input data here.
sde <- read.table("data.txt", header=T, sep="\t", dec=".", na.strings="NA")
# Variables in dataset:
# dataset    plant    animal	visits	prop_visits	eff_per_vis	eff_total
# prop_disp_service	frugivore_species
#
# The frugivore groups are:
# title="Functional group",
#    c("Large birds","Thrushes","Warblers","Small muscicapids","Others")
#
#---------------------------------------------------------------------------
# Code with ggplot2
# This plots the isolines (code prototype by Bernardo Santos.)
#
nlines <- 5 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(sde$eff_per_vis)/max(sde$visits)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(sde$visits),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0,max(sde$visits),length.out=1000)
#---------------------------------------------------------------------------
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ----------------------------------------------------------------
require(devtools)
require(ggplot2)
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(sde, aes(x=visits, y=eff_per_vis)) +
geom_point(shape=sde$group, size=5) +
geom_text(size=4, label=sde$animal,hjust=0.5, vjust=1.9) +
mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,2:11]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
dim(pp)
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# DESCRIPTION:
# The script plots effectiveness landscapes as described in
# Schupp, E. W., Jordano, P. and Gómez, J.M. 2010. Seed dispersal
# effectiveness revisited: a conceptual review. New Phytologist
# 188: 333-353.
#---------------------------------------------------------------------------
# Notes to do
# - Adding a function for the isolines code. OK.
# - Implementing an option for setting the number of desired
# isolines. OK.
# Implementing ggplot2 graph. OK! Done.
# - Checking with other datasets.
# Add isolines labels with annotate rather than geom_text. Pixelated.
#---------------------------------------------------------------------------
# NOT-Log scaled axes. Data example for Prunus mahaleb.
#
# Input data here.
sde <- read.table("data.txt", header=T, sep="\t", dec=".", na.strings="NA")
# Variables in dataset:
# dataset    plant    animal	visits	prop_visits	eff_per_vis	eff_total
# prop_disp_service	frugivore_species
#
# The frugivore groups are:
# title="Functional group",
#    c("Large birds","Thrushes","Warblers","Small muscicapids","Others")
#
#---------------------------------------------------------------------------
# Code with ggplot2
# This plots the isolines (code prototype by Bernardo Santos.)
#
nlines <- 5 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(sde$eff_per_vis)/max(sde$visits)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(sde$visits),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0,max(sde$visits),length.out=1000)
#---------------------------------------------------------------------------
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ----------------------------------------------------------------
require(devtools)
require(ggplot2)
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(sde, aes(x=visits, y=eff_per_vis)) +
geom_point(shape=sde$group, size=5) +
geom_text(size=4, label=sde$animal,hjust=0.5, vjust=1.9) +
mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,2:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# DESCRIPTION:
# The script plots effectiveness landscapes as described in
# Schupp, E. W., Jordano, P. and Gómez, J.M. 2010. Seed dispersal
# effectiveness revisited: a conceptual review. New Phytologist
# 188: 333-353.
#---------------------------------------------------------------------------
# Notes to do
# - Adding a function for the isolines code. OK.
# - Implementing an option for setting the number of desired
# isolines. OK.
# Implementing ggplot2 graph. OK! Done.
# - Checking with other datasets.
# Add isolines labels with annotate rather than geom_text. Pixelated.
#---------------------------------------------------------------------------
# NOT-Log scaled axes. Data example for Prunus mahaleb.
#
# Input data here.
sde <- read.table("data.txt", header=T, sep="\t", dec=".", na.strings="NA")
# Variables in dataset:
# dataset    plant    animal	visits	prop_visits	eff_per_vis	eff_total
# prop_disp_service	frugivore_species
#
# The frugivore groups are:
# title="Functional group",
#    c("Large birds","Thrushes","Warblers","Small muscicapids","Others")
#
#---------------------------------------------------------------------------
# Code with ggplot2
# This plots the isolines (code prototype by Bernardo Santos.)
#
nlines <- 5 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(sde$eff_per_vis)/max(sde$visits)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(sde$visits),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0,max(sde$visits),length.out=1000)
#---------------------------------------------------------------------------
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ----------------------------------------------------------------
require(devtools)
require(ggplot2)
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(sde, aes(x=visits, y=eff_per_vis)) +
geom_point(shape=sde$group, size=5) +
geom_text(size=4, label=sde$animal,hjust=0.5, vjust=1.9) +
mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# DESCRIPTION:
# The script plots effectiveness landscapes as described in
# Schupp, E. W., Jordano, P. and Gómez, J.M. 2010. Seed dispersal
# effectiveness revisited: a conceptual review. New Phytologist
# 188: 333-353.
#---------------------------------------------------------------------------
# Notes to do
# - Adding a function for the isolines code. OK.
# - Implementing an option for setting the number of desired
# isolines. OK.
# Implementing ggplot2 graph. OK! Done.
# - Checking with other datasets.
# Add isolines labels with annotate rather than geom_text. Pixelated.
#---------------------------------------------------------------------------
# NOT-Log scaled axes. Data example for Prunus mahaleb.
#
# Input data here.
sde <- read.table("data.txt", header=T, sep="\t", dec=".", na.strings="NA")
# Variables in dataset:
# dataset    plant    animal	visits	prop_visits	eff_per_vis	eff_total
# prop_disp_service	frugivore_species
#
# The frugivore groups are:
# title="Functional group",
#    c("Large birds","Thrushes","Warblers","Small muscicapids","Others")
#
#---------------------------------------------------------------------------
# Code with ggplot2
# This plots the isolines (code prototype by Bernardo Santos.)
#
nlines <- 15 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(sde$eff_per_vis)/max(sde$visits)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(sde$visits),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0,max(sde$visits),length.out=1000)
#---------------------------------------------------------------------------
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ----------------------------------------------------------------
require(devtools)
require(ggplot2)
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(sde, aes(x=visits, y=eff_per_vis)) +
geom_point(shape=sde$group, size=5) +
geom_text(size=4, label=sde$animal,hjust=0.5, vjust=1.9) +
mytheme_bw()
# Adding isolines
labelx<- rep(0.8*max(sde$visits), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(sde$eff_per_vis)) +
xlab("Visit rate (/10h)") +
ylab("Effectiveness/visit (No. fruits handled/vis)")  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
#---------------------------------------------------------------------------
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
source('~/Documents/Working/~RCode/MyRCode/effectiveness/effectiveness.R', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
dim(pp)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 10)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 5)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 25)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 15)
focal<-read.table("data.txt",header=T,sep="\t",dec=".",na.strings="NA")
# Cecropia labels. Individual trees are cols 10-37 in "focal" dataframe.
mat<-as.matrix(focal[,10:37],col.names=c("cec18","cec02","cec03","cec25","cec22","cec06","cec16","cec13","cec05","cec15","cec28","cec24","cec11","cec21","cec20","cec01","cec04","cec23","cec14","cec12","cec09","cec17","cec07","cec19","cec08","cec10","cec26","cec27"))
# Frugivore individual labels.
str(focal)
focal<-read.table("./cecropia/data.txt",header=T,sep="\t",dec=".",na.strings="NA")
str(focal)
cgla <- focal[,3:9]
str(cgla)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
myxlab= "Quant. comp."
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
cat(myxlab)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
source('~/Documents/Working/~RCode/MyRCode/effectiveness/effectiveness.R', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
myxlab
paste(myxlab)
source('~/.active-rstudio-document', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, mxlab= "Total no. visits", myylab="No. fruits pecked/vis", 15)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, myxlab= "Total no. visits", myylab="No. fruits pecked/vis", 15)
source('~/Documents/Working/~RCode/MyRCode/effectiveness/effectiveness.R', echo=TRUE)
effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, myxlab= "Total no. visits", myylab="No. fruits pecked/vis", 20)
str(cgla)
focal<-read.table("./cecropia/data.txt",header=T,sep="\t",dec=".",na.strings="NA")
str(focal)
?downlader
?downloader
pp<-downloader::download.file("https://github.com/pedroj/datasets/blob/master/prunus_eff.txt")
pp<-downloader::download("https://github.com/pedroj/datasets/blob/master/prunus_eff.txt")
