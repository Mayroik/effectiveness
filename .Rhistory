require(devtools)
require(ggplot2)
#
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(d$q2)/max(d$q1)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
#
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ------------------------------------------------------------
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
# Adding isolines ------------------------------------------------------
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
}
#---------------------------------------------------------------------------
)
#---------------------------------------------------------------------------
# effectiveness
# Function to plot effectiveness landscapes.
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# Options:
#   q1, the "quantitative component", to plot on the X axis.
#   q2, the "qualitative component", to plot on the Y axis.
#   group=NA, a grouping variable to set point shapes (e.g., family).
#   label= NA, a label for the individual points (e.g., spcies acronym).
#   nlines=10, specify the number of isolines.
#   myxlab= "QtComp", optional label for axis X.
#   myylab= "QltComp", optional label for axis Y.
#
# Example:
# effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 10,
#               myxlab= "No. visits/10h",
#               myylab="Effectiveness/vis (No. fruits handled)")
# effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15,
#               myxlab= "Total no. visits",
#               myylab="No. fruits pecked/vis")
#---------------------------------------------------------------------------
#
effectiveness<- function(q1, q2, group=NA, label= NA, nlines=10,
myxlab= "QtComp", myylab= "QltComp")    {
# q1 is the component to plot on X axis
# q2 is the component to plot on Y axis
# group is a group label
# label is a taxa label
require(devtools)
require(ggplot2)
#
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(d$q2)/max(d$q1)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
#
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ------------------------------------------------------------
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
# Adding isolines ------------------------------------------------------
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
}
#---------------------------------------------------------------------------
)
#---------------------------------------------------------------------------
# effectiveness
# Function to plot effectiveness landscapes.
#---------------------------------------------------------------------------
# autoisolines: Code for automatically plotting isolines of
# effectiveness landscapes.
# Based on code for plotting effectiveness landscapes by Pedro
# Jordano and code for automatic calculation of isolines
# by Bernardo Santos.
# 3 December 2013. UNESP, Rio Claro, Brazil. Pedro Jordano.
#---------------------------------------------------------------------------
## First version 12 Jan 2009. Revised 3 December 2013.
## New revision 23 January 2015.
#---------------------------------------------------------------------------
# Options:
#   q1, the "quantitative component", to plot on the X axis.
#   q2, the "qualitative component", to plot on the Y axis.
#   group=NA, a grouping variable to set point shapes (e.g., family).
#   label= NA, a label for the individual points (e.g., spcies acronym).
#   nlines=10, specify the number of isolines.
#   myxlab= "QtComp", optional label for axis X.
#   myylab= "QltComp", optional label for axis Y.
#
# Example:
# effectiveness(sde$visits, sde$eff_per_vis, sde$group, sde$animal, 10,
#               myxlab= "No. visits/10h",
#               myylab="Effectiveness/vis (No. fruits handled)")
# effectiveness(cgla$totvis, cgla$totbic, cgla$fam, cgla$code, 15,
#               myxlab= "Total no. visits",
#               myylab="No. fruits pecked/vis")
#---------------------------------------------------------------------------
#
effectiveness<- function(q1, q2, group=NA, label= NA, nlines=10,
myxlab= "QtComp", myylab= "QltComp")    {
# q1 is the component to plot on X axis
# q2 is the component to plot on Y axis
# group is a group label
# label is a taxa label
require(devtools)
require(ggplot2)
#
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(d$q2)/max(d$q1)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
#
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ------------------------------------------------------------
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
# Adding isolines ------------------------------------------------------
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
}
#---------------------------------------------------------------------------
require(downloader)
#
# PJ example. Based on a dataset of Prunus mahaleb frugivores.
link = "https://raw.githubusercontent.com/pedroj/effectiveness/master/data.txt"
file = "data.txt"
if(!file.exists(file)) download(link, file, mode = "wb")
M <- read.table(file, sep = "\t", dec = ".",
header = TRUE, na.strings="NA")
effectiveness(M$visits, M$eff_per_vis, M$group, M$animal, 10,
myxlab= "No. visits/10h",
myylab="Effectiveness/vis (No. fruits handled)")
source("https://raw.githubusercontent.com/pedroj/effectiveness/master/effectiveness.R")
link="https://raw.githubusercontent.com/pedroj/effectiveness/master/effectiveness.R"
file="effectiveness.R"
source(link, file, mode= "wb")
source(link, file)
source(link, file, local=F)
source(link, file, local=T)
source(link, file, local=F, echo=T)
source(link, file, local=F, echo=T, encoding="utf8")
if(!file.exists(file)) download(link, file, mode = "wb")
source(file)
require(downloader)
#
# Sourcing the effectiveness fucntion code from GitHub.
link = "https://raw.githubusercontent.com/pedroj/effectiveness/master/effectiveness.R"
file = "effectiveness.R"
if(!file.exists(file)) download(link, file, mode = "wb")
source(file)
?matrix
datos<- data.frame(matrix(1.2, Y, c, d, E,
2.3, Y, c, d, E,
3.1, N, C, d, e,
6.1, Y, C, D, e,
5.4, N, c, D, e,
nrow = 5, ncol = 5, byrow=T))
datos<- data.frame(matrix(c(1.2, Y, c, d, E,
2.3, Y, c, d, E,
3.1, N, C, d, e,
6.1, Y, C, D, e,
5.4, N, c, D, e),
nrow = 5, ncol = 5, byrow=T))
datos<- matrix(c(1.2, Y, c, d, E,
2.3, Y, c, d, E,
3.1, N, C, d, e,
6.1, Y, C, D, e,
5.4, N, c, D, e),
nrow = 5, ncol = 5, byrow=T)
datos<- data.frame(matrix(c(1.2, "Y", "c", "d", "E",
2.3, "Y", "c", "d", "E",
3.1, "N", "C", "d", "e",
6.1, "Y", "C", "D", "e",
5.4, "N", "c", "D", "e"),
nrow = 5, ncol = 5, byrow=T))
datos
col.names(datos)<-c("A","B","C","D","E")
colnames(datos)<-c("A","B","C","D","E")
datos
nt=length(datos)
model=glm(A~B+C+D+E,data = datos,family = binomial(link=logit))
coeffsglm=matrix(0,nrow=nt,ncol=4)
if(names(model$coeff[2])=="B") coeffsglm <- matrix((model$coeff[2]),1,2)
coeffsglm
model
model$coeff
if(names(model$coeff[2])=="BY") coeffsglm <- matrix((model$coeff[2]),1,2)
coeffsglm
nt=length(datos)
model=glm(A~B+C+D+E,data = datos,family = binomial(link=logit))
coeffsglm=matrix(0,nrow=nt,ncol=4)
if(names(model$coeff[2])=="BY") coeffsglm <- matrix((model$coeff[2]),1,2)
coeffsglm
if(names(model$coeff[2])=="BY") coeffsglm <- matrix((model$coeff[2]),1,2)
coeffsglm
model$coeff[2]
coeffsglm
coeffsglm=matrix(0,nrow=nt,ncol=4)
coeffsglm
if(names(model$coeff[2])=="BY") coeffsglm[1,2] <- matrix((model$coeff[2]),1,2)
model$coeff[2]
coeffsglm=matrix(0,nrow=nt,ncol=4)
if(names(model$coeff[2])=="BY") coeffsglm[1,2] <- model$coeff[2]
coeffsglm
datos<- data.frame(matrix(c(1.2, "Y", "c", "d", "E",
2.3, "Y", "c", "d", "E",
3.1, "N", "C", "d", "e",
6.1, "Y", "C", "D", "e",
5.4, "N", "c", "D", "e"),
nrow = 5, ncol = 5, byrow=T))
colnames(datos)<-c("A","B","C","D","E")
datos
nt=length(datos)
nt
model=glm(A~B+C+D+E,data = datos,family = binomial(link=logit))
model
coeffsglm=matrix(0,nrow=nt,ncol=4)
coeffsglm
if(names(model$coeff[2])=="BY") coeffsglm[1,2] <- model$coeff[2]
coeffsglm
summary(cars)
require(downloader)
link = "https://raw.githubusercontent.com/pedroj/effectiveness/master/data.txt"
file = "data.txt"
if(!file.exists(file)) download(link, file, mode = "wb")
M <- read.table(file, sep = "\t", dec = ".",
header = TRUE, na.strings="NA")
effectiveness(M$visits, M$eff_per_vis, M$group, M$animal, 10,
myxlab= "No. visits/10h",
myylab="Effectiveness/vis (No. fruits handled)")
source('~/Documents/Working/~RCode/MyRCode/effectiveness/effectiveness.R', echo=TRUE)
effectiveness(M$visits, M$eff_per_vis, M$group, M$animal, 10,
myxlab= "No. visits/10h",
myylab="Effectiveness/vis (No. fruits handled)")
M$visits
M$eff_per_vis
q1<-M$visits
q2<-M$eff_per_vis
require(devtools)
require(ggplot2)
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
alfa <- max(d$q2)/max(d$q1)
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
mytheme_bw <- function (base_size = 12, base_family = "")
{
theme_grey(base_size = base_size, base_family = base_family) %+replace%
theme(axis.text = element_text(size = rel(0.8)),
axis.ticks = element_line(colour = "black"),
legend.key = element_rect(colour = "grey80"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = "black"),
panel.grid.major = element_line(colour = "grey90", size = 0.2),
panel.grid.minor = element_line(colour = "grey98", size = 0.4),
strip.background = element_rect(fill = "grey80",
colour = "grey50", size = 0.2))
}
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
effectiveness<- function(q1, q2, group=NA, label= NA, nlines=10,
myxlab= "QtComp", myylab= "QltComp")    {
# q1 is the component to plot on X axis
# q2 is the component to plot on Y axis
# group is a group label
# label is a taxa label
require(devtools)
require(ggplot2)
#
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(d$q2)/max(d$q1)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
#
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ------------------------------------------------------------
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
# Adding isolines ------------------------------------------------------
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
}
myxlab= "No. visits/10h"
myylab="Effectiveness/vis (No. fruits handled)"
require(devtools)
require(ggplot2)
#
d<-as.data.frame(cbind(q1, q2, group, label))
names(d)
nlines <- nlines+1 # number of isolines wanted
# slope of a straight line linking (left,bottom) to (right,above)
# corners of the graphic
alfa <- max(d$q2)/max(d$q1)
# sequence of (nlines) regular spaced x values for the isoclines
xval <- seq(0, max(d$q1),
length.out=(nlines+1))[2:(nlines+1)]
isoc <- (xval*xval*alfa) # values of the isoclines
vis1<-seq(0, max(d$q1), length.out= 1000)
#
pp<- as.data.frame(vis1) # Build dataset for within loop plot.
for(i in 1:nlines)
{
pp<- cbind(pp, isoc[i]/vis1)
}
# Main plot ------------------------------------------------------------
# mytheme_bw.R
devtools::source_gist("https://gist.github.com/b843fbafa3af8f408972")
#
p1<- ggplot(d, aes(x=q1, y=q2)) +
geom_point(shape= group, size=5) +
geom_text(size= 4, label= label, hjust= 0.5, vjust= 1.9) +
mytheme_bw()
# Adding isolines ------------------------------------------------------
labelx<- rep(0.8*max(q1), nlines)
labely<- as.vector(t(pp[800,1:nlines+1]))
for(i in 1:nlines+1){
#labely<- isoc[i]/(0.8*max(sde$eff_per_vis)
#    labely<- pp[,i][800]
p1= p1 + geom_line(aes(x, y),
data= data.frame(x= pp$vis1, y= pp[,i]),
col="blue", size = 0.25, alpha= 0.6) +
ylim(0, max(q2)) +
xlab(paste(myxlab)) +
ylab(paste(myylab))  # +
#        geom_text(aes(), data= NULL, x= labelx, y= labely,
#            label = paste("QC = ", round(isoc[i], digits=1)),
#            size = 4, colour = "red")
}
p1 + annotate("text", x= labelx, y= labely,
label=paste("QC= ", round(isoc,1)),
size=4, colour="red", hjust=0)
?source_gist
source('~/Documents/Working/~RCode/MyRCode/effectiveness/effectiveness.R', echo=TRUE)
M
require(downloader)
#
# PJ example. Based on a dataset of Prunus mahaleb frugivores.
# Get the data from my GitHub repository.
link = "https://raw.githubusercontent.com/pedroj/effectiveness/master/data.txt"
file = "data.txt"
if(!file.exists(file)) download(link, file, mode = "wb")
M <- read.table(file, sep = "\t", dec = ".",
header = TRUE, na.strings="NA")
# Run the function.
effectiveness(M$visits, M$eff_per_vis, M$group, M$animal, 10,
myxlab= "No. visits/10h",
myylab="Effectiveness/vis (No. fruits handled)")
