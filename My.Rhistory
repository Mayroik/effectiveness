print(prabclust(tai))
result <- mpmcorrelogram(tai, dist, simil=TRUE)
distance<-coord2dist(coordmatrix=xy,file.format="decimal2",cut=0.1,neighbors=TRUE)
result <- mpmcorrelogram(tai, as.dist(distance), simil=TRUE)
data(S)
data(D)
result <- mpmcorrelogram(S, D, simil=TRUE)
is.dist(dst)
dst
dst <- as.dist(dst)
mpmcorrelogram
dst <- pointDistance(xy, longlat=F)
result <- mpmcorrelogram(tai, dst, simil=TRUE)
?double
result <- mpmcorrelogram(tai, as.double(dst), simil=TRUE)
result <- mpmcorrelogram(as.double(tai), as.double(dst), simil=TRUE)
?vegan
library(vegan)
vegdist(xy,methos="euclidean")
D<-vegdist(xy,method="euclidean")
str(D)
plot(D)
result <- mpmcorrelogram(tai, D, simil=TRUE)
tai
tai$amatrix
S<-vegdist(tai$amatrix,method="jaccard")
?alleleint
?alleleinit
tai$distmat
result <- mpmcorrelogram(tai$distmat, D, simil=TRUE)
?mpmcorrelogram
result <- mpmcorrelogram(tai$distmat, D, permutations = 99, simil=F)
1022/100
30*50
30*45
30*35
permutations = 99, simil=T, nclass=35)
permutations = 999, simil=F, nclass=70)
permutations = 99, simil=F, nclass=70)
permutations = 99, simil=F, nclass=30)
permutations = 99, simil=T, nclass=30)
result <- mpmcorrelogram(tai$distmat, D,
permutations = 99, simil=T, nclass=12)
hist(D)
prabclust(tai)
?prabclust
?prabinit
clusters<-prabclust(tai)
clusters$clustsummary
clusters$clustering
clusters$points
plot(rnorm(200),rnorm(200))
plot(coor$y, coor$x,
xlim=c(0,400),ylim=c(0,1200))
?install.packages
library(ecespa); library(spatial); library(spatstat); library(gstat)#
library(sgeostat); library(MASS)
bei
par(mfrow=c(1,2))#
quadratcount(bei, nx = 6, ny = 3) #
Q <- quadratcount(bei, nx = 6, ny = 3)
plot(bei, cex = 0.5, pch = "+")
plot(Q, add = TRUE, cex = 2)
M <- quadrat.test(bei, nx = 6, ny = 3)
M
plot(Q)
plot(M, add = TRUE, cex = 1)
?quadrat.test
den <- density(bei, sigma = 70)
plot(den)
plot(bei, add = TRUE, cex = 0.5)
persp(den)
contour(den)
plot(lansing)
str(lansing)
head(lansing)
ppm(lansing, ~ marks, Poisson())
data(bei)
str(bei)
fit <- ppm(bei, ~slope, covariates = slope)
fit <- ppm(bei, ~slope, covariates = grad)
fit <- ppm(bei, ~slope, covariates = list(grad))
?ppm
library(deldir)
hick <- split(lansing)$hickory
hick.tr<-deldir(hick$x,hick$y)
par(mfrow=c(1,3))
plot(hick)
plot(delaunay(hick))
plot(hick.tr)
library(ape); library(ade4)
tree.primates <- read.tree(text="((((Homo:0.21,Pongo:0.21):0.28,Macaca:0.49):0.13,Ateles: 0.62):0.38,Galago:1.00);")
body <- c(4.09434,3.61092,2.37024,2.02815,-1.46968)#
longevity <- c(4.74493,3.3322,3.3673,2.89037,2.30259)
plot(body,longevity)
names(body)<-names(longevity)<-c("Homo","Pongo","Macaca","Ateles","Galago")
pic.body <- pic(body,tree.primates)#
pic.longevity <- pic(longevity,tree.primates)
pic.body
plot(tree.primates)
nodelabels(round(pic.body,3),adj=c(0,0.5),frame="n")#
nodelabels(round(pic.longevity,3),adj=c(0,2),frame="n")
par(mfrow=c(2,1))#
plot(body,longevity)#
plot(pic.body,pic.longevity,pch=19)#
abline(0,1,lty=2)
data(carnivora)
names(carnivora)
library(nlme)
m <- lme(log10(SW) ~ 1, random = ~ 1|Order/SuperFamily/Family/Genus, data=carnivora)#
v <- varcomp(m, TRUE, TRUE)
plot(v)
data("landplants.newick")
landplants.newick
tree.landplants <- read.tree(text = landplants.newick)
plot(tree.landplants, label.offset = 0.001)
plot(tree.landplants, label.offset = 0.001,cex=2)
plot(tree.landplants, label.offset = 0.001, type="radial")
trape<-read.tree(text="((Homo,Pan),Gorilla);")
plot(trape,x.lim=c(-0.1,2.2))
nodelabels(c("6.4 Ma","5.4 Ma"),frame="c",bg="white")
data(bird.families)#
zoom(bird.families,list(1:15,38:48),col=rep("grey",2),no.margin=TRUE,font=1,subtree=TRUE)
data(palm)
palm.phy <- newick2phylog(palm$tre)
palm.phy
radial.phylog(palm.phy,clabel.l=1.25)
table.phylog(tt, palm.phy, clabel.r = 0.7, f = 0.4)
tt<-cbind.data.frame(scalewt((palm$traits[,c(2,4:7)])))#
table.phylog(tt, palm.phy, clabel.r = 0.7, f = 0.4)
?barplot
?Kruskal-Wallis
??Kruskal
library (WGCNA)
mean(rnd(1000))
mean(rdm(1000))
mean(rnormal(1000))
mean(rnorm(1000))
ls()
library(rgeos)
data<-read.table(pipe("pbpaste"),header=TRUE,dec=",")
data<-read.table(pipe("pbpaste"),header=TRUE,dec=".",sep="\t")
str(data)
table(data)
table(data$Eval1)
table(data$Eval2)
table(data$Eval1)+table(data$Eval2)
library(adegenet)
?chooseCN
?spca
library(lmtest)
?vuong
??vuong
a<-knit('/Users/pedroj/Documents/Archivo/MEC/EvaluaciÃ³n-Proyectos/BOS2012/code.R')
system(paste("open", a))
install.packages("knitr")
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
library(markdown)
pp<-read.table(pipe("pbpaste"),header=TRUE,dec=".")
str(pp)
plot(pp$NTC,pp$NODF)
mod.spp<-c(3,5,1,2)
mod.spp
mod.spp[1]
mod.spp[2]
library(MASS)
library(datasets)
library(seriation)
rbind(
random = criterion(d),
reordered = criterion(d, order)
x <- scale(x, center = FALSE)
layout(matrix(1:4, ncol = 2, byrow = TRUE), respect=TRUE)
pimage(x, main = "original data")
criterion(x)
order <- seriate(x, method = "BEA_TSP")
pimage(x, order, main = "TSP to optimize ME")
order <- seriate(x, method="PCA")
pimage(x, order, main = "first principal component")
order <- c(
seriate(dist(x), method = "TSP"),
seriate(dist(t(x)), method = "TSP")
pimage(x, order, main = "2 TSPs")
criterion(x, order)
par(def.par)
order <- seriate(d)
order
def.par <- par(no.readonly = TRUE)
layout(cbind(1,2), respect = TRUE)
pimage(d, main = "Random")
pimage(d, order, main = "Reordered")
library(hybridHclust)
set.seed(101)
x <- matrix(rnorm(500),5,100)
x <- rbind(x,x[rep(1,4),]+matrix(rnorm(400),4,100))
x <- rbind(x,x[2:5,]+matrix(rnorm(400),4,100))
image(1-cor(t(x)),main='correlation distances',zlim=c(0,2),col=gray(1:100/101))
e1 <- eisenCluster(x,'correlation')
plot(e1)
data("iris")
x <- as.matrix(iris[-5])
x <- x[sample(1:nrow(x)),]
d <- dist(x)
hclust(x)
?seriate
library(igraph)#
set.seed(1)#
#
avg.stat <- function(nei, p) {#
result <- replicate(1000, {#
wsg <- watts.strogatz.game(1, 100, nei, p)#
c(average.path.length(wsg),#
transitivity(wsg))#
})#
apply(result, 1, quantile, probs = c(0.5, 0.05, 0.95))#
}#
#
nei <- 6#
p <- 2 ^ -seq(0, 10, len = 21)#
result <- sapply(p, avg.stat, nei = nei)#
result <- t(result / rep(avg.stat(nei, 0)[1,], each = 3))#
par(mar=c(3.2, 2, 0.2, 0.2), mgp=c(2, 1, 0))#
matplot(p, result, type = "l", log = "x", xaxt = "n", ylab = "",#
lty = rep(c(1,2,2),2), col=rep(c(1,2), each=3))#
axis(1, at = 2 ^ -(0:10),#
labels =  c(1, parse(text = paste(2, 1:10, sep = "^-",#
collapse = ";"))))#
legend("bottomleft", c("average path length", "clustering coefficient"),#
lty = 1, col = c(1, 2))
dens1<-c(0.0107,0.0051,0.0010,0.0031)#
dens2<-c(0.0107,0.0085,0.0016,0.0050)#
nb<-c(29.7,42.32,28.38,56.16)
abline(b=1.0)
?abline
abline(coef=(c(0.0,1.0))
dens1<-c(0.0107,0.0051,0.0010,0.0031)#
dens2<-c(0.0107,0.0085,0.0016,0.0050)#
nb<-c(29.7,42.32,28.38,56.16)#
plot(dens1,dens2)#
abline(a=0.0,b=1.0)
par(mfrow=c(1,2))
plot(dens1,nb)
plot(dens2,nb)
dens1<-c(0.0107,0.0051,0.0010,0.0031)#
dens2<-c(0.0107,0.0085,0.0016,0.0050)#
nb1<-c(29.72,42.32,28.38,56.16)#
nb2<-c(29.72,46.57,26.60,54.52)
par(mfrow=c(1,2))#
plot(dens1,nb1)#
plot(dens2,nb2)
area<-c(3725.0,17200.0,138500.0,72700.0)
dens1<-c(0.0107,0.0051,0.0010,0.0031)#
dens2<-c(0.0107,0.0085,0.0016,0.0050)#
nb1<-c(29.72,42.32,28.38,56.16)#
nb2<-c(29.72,46.57,26.60,54.52)#
area1<-c(3725.0,17200.0,138500.0,72700.0)#
area2<-c(3725.0,10400.0,92000.0,45000.0)
par(mfrow=c(2,2))#
plot(dens1,nb1)#
plot(dens2,nb2)#
plot(area1,nb1)#
plot(area2,nb2)
dens1<-c(0.0107,0.0051,0.0010,0.0031) #
dens2<-c(0.0107,0.0085,0.0016,0.0050) #
dens22<-c(0.0107,0.0051,0.00061,0.0019,0.0031) #
nb1<-c(29.72,42.32,28.38,56.16)#
nb2<-c(29.72,46.57,26.60,54.52)#
nb22<-c(29.72,46.57,26.60,26.60,54.52)#
area1<-c(3725.0,17200.0,138500.0,72700.0)#
area2<-c(3725.0,10400.0,92000.0,45000.0)
plot(dens22,nb22)
plot(area1,dens1)
plot(dens1,dens2)
abline(a=0.0,b=1.0)
nbarea<-nb22/dens22
plot(dens22,nbarea)
data(varespec)
data(varechem)
vare.cca <- cca(varespec, varechem)
vare.cca
plot(vare.cca)
scores(vare.cca)
library(boot)
?inv.logit
?plot
x <- expand.grid(1:20, 1:5)[,1]
y <- expand.grid(1:20, 1:5)[,2]
z <- cbind(
rmvn.spa(x=x, y=y, p=2, method="exp"),
rmvn.spa(x=x, y=y, p=2, method="exp")
)
library(ncf)
z <- cbind(#
        rmvn.spa(x=x, y=y, p=2, method="exp"),#
        rmvn.spa(x=x, y=y, p=2, method="exp")#
        )
w <- cbind(#
        rmvn.spa(x=x, y=y, p=2, method="gaus"),#
        rmvn.spa(x=x, y=y, p=2, method="gaus")#
        )
fit1 <- correlog(x=x, y=y, z=z[,1], increment=2, resamp=5)
plot(fit1)
fit2 <- correlog(x=x, y=y, z=z, increment=2, resamp=5)
plot(fit2)
fit3 <- correlog(x=x, y=y, z=z, w=w, increment=2, resamp=5)
plot(fit3)
fit1 <- spline.correlog(x=x, y=y, z=z[,1], resamp = 5)
summary.spline.correlog(fit1)
plot.spline.correlog(fit1)
fit2 <- spline.correlog(x=x, y=y, z=z, resamp = 5)
plot.spline.correlog(fit2)
fit3 <- spline.correlog(x=x, y=y, z=z, w=w, resamp = 5)
summary.spline.correlog(fit3)
plot.spline.correlog(fit3)
library(ape)
?ape
?bipartite
